import openpyxl
from openpyxl.utils import get_column_letter
import json


def parse_excel_with_formatting(filename):
    """
    –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    wb = openpyxl.load_workbook(filename)
    ws = wb.active

    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    data = {
        'sheet_name': ws.title,
        'dimensions': {
            'max_row': ws.max_row,
            'max_column': ws.max_column
        },
        'merged_cells': [],
        'column_widths': {},
        'row_heights': {},
        'cells': []
    }

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
    for merged_range in ws.merged_cells.ranges:
        data['merged_cells'].append(str(merged_range))
        print(f"–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏: {merged_range}")

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π)
    for col in range(1, ws.max_column + 1):
        col_letter = get_column_letter(col)
        width = ws.column_dimensions[col_letter].width
        if width and width != 8.43:  # 8.43 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            data['column_widths'][col_letter] = width

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π)
    for row in range(1, ws.max_row + 1):
        height = ws.row_dimensions[row].height
        if height and height != 15:  # 15 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            data['row_heights'][row] = height

    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —è—á–µ–π–∫—É —Å –ø–æ–ª–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print("\n=== –°–û–î–ï–†–ñ–ò–ú–û–ï –ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –Ø–ß–ï–ï–ö ===\n")

    for row in range(1, ws.max_row + 1):
        for col in range(1, ws.max_column + 1):
            cell = ws.cell(row=row, column=col)
            col_letter = get_column_letter(col)
            cell_address = f"{col_letter}{row}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∞ —á–∞—Å—Ç—å—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            is_merged = False
            for merged_range in ws.merged_cells.ranges:
                if cell.coordinate in merged_range:
                    is_merged = True
                    break

            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —è—á–µ–π–∫–µ
            cell_info = {
                'address': cell_address,
                'row': row,
                'column': col
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if cell.value is not None:
                cell_info['value'] = cell.value

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞
            if is_merged:
                cell_info['is_merged'] = True

            # –®—Ä–∏—Ñ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–∏—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
            if cell.font:
                font_info = {}
                if cell.font.name and cell.font.name != 'Calibri':
                    font_info['name'] = cell.font.name
                if cell.font.size and cell.font.size != 11:
                    font_info['size'] = cell.font.size
                if cell.font.bold:
                    font_info['bold'] = True
                if cell.font.italic:
                    font_info['italic'] = True
                if cell.font.underline and cell.font.underline != 'none':
                    font_info['underline'] = cell.font.underline

                if cell.font.color:
                    if hasattr(cell.font.color, 'rgb') and cell.font.color.rgb != '00000000':
                        font_info['color'] = cell.font.color.rgb
                    elif hasattr(cell.font.color, 'theme'):
                        font_info['color'] = f"theme:{cell.font.color.theme}"

                if font_info:
                    cell_info['font'] = font_info

            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if cell.alignment:
                alignment_info = {}
                if cell.alignment.horizontal and cell.alignment.horizontal != 'general':
                    alignment_info['horizontal'] = cell.alignment.horizontal
                if cell.alignment.vertical and cell.alignment.vertical != 'bottom':
                    alignment_info['vertical'] = cell.alignment.vertical
                if cell.alignment.wrap_text:
                    alignment_info['wrap_text'] = True
                if cell.alignment.text_rotation:
                    alignment_info['text_rotation'] = cell.alignment.text_rotation
                if cell.alignment.indent:
                    alignment_info['indent'] = cell.alignment.indent

                if alignment_info:
                    cell_info['alignment'] = alignment_info

            # –ì—Ä–∞–Ω–∏—Ü—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
            if cell.border:
                border_info = {}
                if cell.border.left and cell.border.left.style:
                    border_info['left'] = cell.border.left.style
                if cell.border.right and cell.border.right.style:
                    border_info['right'] = cell.border.right.style
                if cell.border.top and cell.border.top.style:
                    border_info['top'] = cell.border.top.style
                if cell.border.bottom and cell.border.bottom.style:
                    border_info['bottom'] = cell.border.bottom.style

                if border_info:
                    cell_info['border'] = border_info

            # –ó–∞–ª–∏–≤–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–≤–µ—Ç
            if cell.fill and cell.fill.patternType and cell.fill.patternType != 'none':
                fill_info = {'pattern_type': cell.fill.patternType}

                if cell.fill.fgColor:
                    if hasattr(cell.fill.fgColor, 'rgb') and cell.fill.fgColor.rgb != '00000000':
                        fill_info['fg_color'] = cell.fill.fgColor.rgb
                    elif hasattr(cell.fill.fgColor, 'theme'):
                        fill_info['fg_color'] = f"theme:{cell.fill.fgColor.theme}"

                if cell.fill.bgColor:
                    if hasattr(cell.fill.bgColor, 'rgb') and cell.fill.bgColor.rgb != '00000000':
                        fill_info['bg_color'] = cell.fill.bgColor.rgb
                    elif hasattr(cell.fill.bgColor, 'theme'):
                        fill_info['bg_color'] = f"theme:{cell.fill.bgColor.theme}"

                if len(fill_info) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ pattern_type
                    cell_info['fill'] = fill_info

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —è—á–µ–π–∫–∏ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            if len(cell_info) > 3:  # –ë–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ—Å—Ç–æ address, row, column
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"\nüìç –Ø—á–µ–π–∫–∞ {cell_address}:")
                if 'value' in cell_info:
                    print(f"   –ó–Ω–∞—á–µ–Ω–∏–µ: {cell_info['value']}")
                if cell_info.get('is_merged'):
                    print(f"   ‚ö†Ô∏è –ß–∞—Å—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
                if cell_info.get('font', {}).get('bold'):
                    print(
                        f"   –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç: {cell_info['font'].get('name', 'Calibri')}, —Ä–∞–∑–º–µ—Ä {cell_info['font'].get('size', 11)}")
                if cell_info.get('alignment', {}).get('horizontal'):
                    print(f"   –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {cell_info['alignment']['horizontal']}")
                if cell_info.get('fill', {}).get('fg_color'):
                    print(f"   –¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏: {cell_info['fill']['fg_color']}")

                data['cells'].append(cell_info)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    with open('excel_format_data.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2, default=str)

    print("\n" + "=" * 50)
    print(f"‚úÖ –§–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {data['dimensions']['max_row']}")
    print(f"üìä –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {data['dimensions']['max_column']}")
    print(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π: {len(data['merged_cells'])}")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —è—á–µ–µ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: {len(data['cells'])}")
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ excel_format_data.json")
    print("=" * 50)

    return data




if __name__ == '__main__':
    try:
        result = parse_excel_with_formatting('—à–∞–ø–∫–∞.xlsx')
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª '—à–∞–ø–∫–∞.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    finally:
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è...")