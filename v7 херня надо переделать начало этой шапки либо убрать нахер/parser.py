import openpyxl
from pathlib import Path


def analyze_koshtorys(file_path):
    """–ê–Ω–∞–ª—ñ–∑—É—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ö–æ—à—Ç–æ—Ä–∏—Å—É"""

    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    wb = openpyxl.load_workbook(file_path, data_only=True)
    ws = wb.active

    print("=" * 100)
    print("–ê–ù–ê–õ–Ü–ó –°–¢–†–£–ö–¢–£–†–ò –ö–û–®–¢–û–†–ò–°–£")
    print("=" * 100)

    # 1. –ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É –≤ D12
    print("\nüìã –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:")
    print(f"  D12 (–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É): {ws['D12'].value}")

    # 2. –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ (—Ä—è–¥–æ–∫ 27)
    print(f"\nüì¶ –¢–û–í–ê–†–ò (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä—è–¥–∫–∞ 27):")
    print(f"{'–†—è–¥–æ–∫':<8} {'C (–Ω–∞–∑–≤–∞)':<40} {'G (–ö–ï–ö–í)':<10} {'K (—Å—É–º–∞)':<15} {'–ü—Ä–∏–º—ñ—Ç–∫–∞'}")
    print("-" * 100)

    tovar_rows = []
    razom_row = None
    nagrada_row = None

    for row in range(27, ws.max_row + 1):
        c_val = ws[f'C{row}'].value
        g_val = ws[f'G{row}'].value
        k_val = ws[f'K{row}'].value

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ "–†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º"
        if c_val and isinstance(c_val, str) and '–†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º' in c_val:
            razom_row = row
            print(f"{row:<8} {str(c_val)[:40]:<40} {'‚îÄ':<10} {str(k_val):<15} ‚ö†Ô∏è  –†–ê–ó–û–ú - —Å—É–º–∞ –≤—Å—ñ—Ö")
            break

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ "–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞"
        if c_val and isinstance(c_val, str) and '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞' in c_val:
            nagrada_row = row
            print(f"{row:<8} {str(c_val)[:40]:<40} {str(g_val):<10} {str(k_val):<15} ‚ö†Ô∏è  –ù–ï –¢–û–í–ê–†!")
            continue

        # –Ø–∫—â–æ —î –¥–∞–Ω—ñ - —Ü–µ —Ç–æ–≤–∞—Ä/–ø–æ—Å–ª—É–≥–∞
        if c_val or g_val or k_val:
            tovar_rows.append({
                'row': row,
                'name': c_val,
                'kekv': g_val,
                'suma': k_val
            })

            note = ""
            if c_val and '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞' in str(c_val):
                note = "‚ö†Ô∏è  –ù–ï –¢–û–í–ê–†!"

            print(f"{row:<8} {str(c_val)[:40]:<40} {str(g_val):<10} {str(k_val):<15} {note}")

    print(f"\nüìä –ü–Ü–î–°–£–ú–ö–ò –ü–û –ö–ï–ö–í (—Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω—ñ –∑ —Ç–æ–≤–∞—Ä—ñ–≤):")
    print(f"{'–ö–ï–ö–í':<10} {'–°—É–º–∞':<15} {'–î–µ—Ç–∞–ª—ñ'}")
    print("-" * 100)

    kekv_data = {}

    # –ì—Ä—É–ø—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –ø–æ –ö–ï–ö–í —ñ —Ä–∞—Ö—É—î–º–æ —Å—É–º–∏
    for tovar in tovar_rows:
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ "–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞"
        if tovar['name'] and '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞' in str(tovar['name']):
            continue

        if tovar['kekv']:
            kekv_num = str(tovar['kekv']).strip()
            suma = tovar['suma'] or 0

            if isinstance(suma, str):
                try:
                    suma = float(suma)
                except:
                    suma = 0

            if kekv_num not in kekv_data:
                kekv_data[kekv_num] = 0

            kekv_data[kekv_num] += suma

    # –í–∏–≤–æ–¥–∏–º–æ —Å—É–º–∏ –ø–æ –ö–ï–ö–í
    for kekv in sorted(kekv_data.keys()):
        suma = kekv_data[kekv]
        print(f"{kekv:<10} {suma:<15.2f} –ö–ï–ö–í {kekv}: {suma:.2f} –≥—Ä–Ω")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ "–†–∞–∑–æ–º" —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ —Å—É–º–æ—é —Ç–æ–≤–∞—Ä—ñ–≤
    razom_suma = ws[f'K{razom_row}'].value if razom_row else 0
    total_tovarov = sum(kekv_data.values())

    if razom_row:
        print(f"\n  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: –†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º (K{razom_row}): {razom_suma}")
        print(f"  –°—É–º–∞ –ø–æ –ö–ï–ö–í: {total_tovarov:.2f}")
        print(f"  –°–ø—ñ–≤–ø–∞–¥–∞—î: {'‚úì' if abs(razom_suma - total_tovarov) < 0.01 else '‚úó'}")

    print(f"\n‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: {len(tovar_rows)}")
    print(f"  –†—è–¥–æ–∫ '–†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º': {razom_row}")
    print(f"  –†—è–¥–æ–∫ '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞': {nagrada_row}")
    print(f"  –ü–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä: —Ä—è–¥–æ–∫ {tovar_rows[0]['row'] if tovar_rows else 'N/A'}")
    print(f"  –û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–æ–≤–∞—Ä: —Ä—è–¥–æ–∫ {tovar_rows[-1]['row'] if tovar_rows else 'N/A'}")
    print(f"\n  –ö–ï–ö–í –î–ê–ù–Ü:")
    for kekv, suma in kekv_data.items():
        print(f"    –ö–ï–ö–í {kekv}: {suma}")

    print("\n" + "=" * 100)
    print("–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –û–ù–û–í–õ–ï–ù–ù–Ø read_koshtorys_data():")
    print("=" * 100)
    print("""
    1. –ü–æ—á–∏–Ω–∞—Ç–∏ –∑ —Ä—è–¥–∫–∞ 27 (–∑–∞–º—ñ—Å—Ç—å –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø–æ—à—É–∫—É)
    2. –ó—É–ø–∏–Ω—è—Ç–∏—Å—è –∫–æ–ª–∏ –∑–Ω–∞–π–¥–µ–º–æ '–†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º'
    3. –ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —Ä—è–¥–∫–∏ –∑ '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞'
    4. –ß–∏—Ç–∞—Ç–∏ —Å—É–º–∏ –ø–æ –ö–ï–ö–í –ø—ñ—Å–ª—è —Ä—è–¥–∫–∞ '–†–∞–∑–æ–º'
    5. –î–∞–Ω—ñ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –≤: C (–Ω–∞–∑–≤–∞), G (–ö–ï–ö–í), K (—Å—É–º–∞)
    """)

    wb.close()

if __name__ == '__main__':
    try:
        analyze_koshtorys('–ö–æ—à—Ç–æ—Ä–∏—Å.xlsx')
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback

        traceback.print_exc()
    finally:
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è...")
# –ó–ê–ü–£–°–ö
