import openpyxl
from pathlib import Path


def full_diagnostic_koshtorys(file_path):
    """–ü–û–í–ù–ò–ô –∞–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ö–æ—à—Ç–æ—Ä–∏—Å—É - –ø–æ–∫–∞–∑—É—î –í–°–Ü –∫–æ–ª–æ–Ω–∫–∏"""

    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return

    wb = openpyxl.load_workbook(file_path, data_only=True)

    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ª–∏—Å—Ç (–Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–∑–≤–∏)
    ws = wb.worksheets[0]
    sheet_name = ws.title

    print("=" * 120)
    print(f"–ü–û–í–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ö–û–®–¢–û–†–ò–°–£ (–ª–∏—Å—Ç: '{sheet_name}')")
    print("=" * 120)

    # 1. –ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É –≤ D12
    print("\nüìã –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø:")
    print(f"  D12 (–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É): {ws['D12'].value}")

    # 2. –ü–û–ö–ê–ó–£–Ñ–ú–û –í–°–Ü –ö–û–õ–û–ù–ö–ò –∑ —Ä—è–¥–∫–∞ 27 –¥–æ "–†–∞–∑–æ–º"
    print(f"\nüì¶ –¢–û–í–ê–†–ò (—Ä—è–¥–∫–∏ 27+) - –í–°–Ü –ö–û–õ–û–ù–ö–ò A-P:")
    print(
        f"{'Row':<5} {'A':<8} {'B':<15} {'C':<25} {'D':<10} {'E':<10} {'F':<10} {'G':<8} {'H':<10} {'I':<10} {'J':<10} {'K':<12} {'L':<12} {'M':<10} {'N':<10} {'O':<10} {'P':<10}")
    print("-" * 120)

    for row in range(27, min(50, ws.max_row + 1)):  # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ 50 —Ä—è–¥–∫–∞
        c_val = ws[f'C{row}'].value

        # –ó—É–ø–∏–Ω—è—î–º–æ—Å—å –Ω–∞ "–†–∞–∑–æ–º"
        if c_val and isinstance(c_val, str) and '–†–∞–∑–æ–º –∑–∞ –∫–æ—à—Ç–æ—Ä–∏—Å–æ–º' in c_val:
            print(f"\n{'=' * 120}")
            print(f"Row {row}: –†–ê–ó–û–ú –ó–ê –ö–û–®–¢–û–†–ò–°–û–ú (–∑—É–ø–∏–Ω—è—î–º–æ—Å—å)")
            print(f"{'=' * 120}")

            # –ü–æ–∫–∞–∑—É—î–º–æ —Ü–µ–π —Ä—è–¥–æ–∫ –æ–∫—Ä–µ–º–æ
            row_data = []
            for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']:
                val = ws[f'{col}{row}'].value
                row_data.append(str(val)[:10] if val else '‚îÄ')

            print(f"{row:<5} {' | '.join(row_data)}")

            # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ 3 —Ä—è–¥–∫–∏ (—Ç–∞–º –ö–ï–ö–í —Å—É–º–∏)
            print(f"\nüìä –†–Ø–î–ö–ò –ó –ü–Ü–î–°–£–ú–ö–ê–ú–ò –ö–ï–ö–í:")
            for next_row in range(row + 1, row + 4):
                row_data = []
                for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']:
                    val = ws[f'{col}{next_row}'].value
                    row_data.append(str(val)[:10] if val else '‚îÄ')
                print(f"{next_row:<5} {' | '.join(row_data)}")

            break

        # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞
        row_data = []
        for col in ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']:
            val = ws[f'{col}{row}'].value
            if val is None:
                row_data.append('‚îÄ')
            else:
                # –û–±—Ä—ñ–∑–∞—î–º–æ –¥–æ–≤–≥—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
                val_str = str(val)
                if len(val_str) > 12:
                    val_str = val_str[:9] + "..."
                row_data.append(val_str)

        # –í–∏–¥—ñ–ª—è—î–º–æ "–ù–∞–≥–æ—Ä–æ–¥–Ω–∞ –∞—Ç—Ä–∏–±—É—Ç–∏–∫–∞"
        marker = " ‚ö†Ô∏è –ù–ê–ì–û–†–û–î–ù–ê" if (c_val and '–ù–∞–≥–æ—Ä–æ–¥–Ω–∞' in str(c_val)) else ""

        print(
            f"{row:<5} {row_data[0]:<8} {row_data[1]:<15} {row_data[2]:<25} {row_data[3]:<10} {row_data[4]:<10} {row_data[5]:<10} {row_data[6]:<8} {row_data[7]:<10} {row_data[8]:<10} {row_data[9]:<10} {row_data[10]:<12} {row_data[11]:<12} {row_data[12]:<10} {row_data[13]:<10} {row_data[14]:<10} {row_data[15]:<10}{marker}")

    # 3. –ê–ù–ê–õ–Ü–ó: —è–∫—ñ –∫–æ–ª–æ–Ω–∫–∏ –º—ñ—Å—Ç—è—Ç—å —á–∏—Å–ª–æ–≤—ñ –¥–∞–Ω—ñ
    print(f"\nüìä –ê–ù–ê–õ–Ü–ó –ß–ò–°–õ–û–í–ò–• –ö–û–õ–û–ù–û–ö (—Ä—è–¥–∫–∏ 27-45):")

    numeric_cols = {}
    for col_letter in ['D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P']:
        has_numbers = False
        sample_values = []

        for row in range(27, 46):
            val = ws[f'{col_letter}{row}'].value
            if val is not None and val != 0:
                if isinstance(val, (int, float)):
                    has_numbers = True
                    sample_values.append(f"{val}")
                elif isinstance(val, str):
                    try:
                        num = float(val.replace(',', '.'))
                        has_numbers = True
                        sample_values.append(f"{num}")
                    except:
                        pass

        if has_numbers:
            numeric_cols[col_letter] = sample_values[:3]  # –ü–µ—Ä—à—ñ 3 –∑—Ä–∞–∑–∫–∏

    print("\n–ö–æ–ª–æ–Ω–∫–∏ –∑ —á–∏—Å–ª–∞–º–∏:")
    for col, samples in numeric_cols.items():
        print(f"  –ö–æ–ª–æ–Ω–∫–∞ {col}: {', '.join(samples)}")

    # 4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø
    print(f"\n" + "=" * 120)
    print("üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
    print("=" * 120)
    print("""
    –ü–æ–¥–∏–≤–∏—Å—å –Ω–∞ —Ç–∞–±–ª–∏—Ü—é –≤–∏—â–µ —ñ —Å–∫–∞–∂–∏:
    1. –í —è–∫—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –°–£–ú–ò —Ç–æ–≤–∞—Ä—ñ–≤? (K, L, –∞–±–æ —ñ–Ω—à–∞?)
    2. –í —è–∫—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ö–ï–ö–í? (G –∞–±–æ —ñ–Ω—à–∞?)
    3. –í —è–∫—ñ–π –∫–æ–ª–æ–Ω—Ü—ñ –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –ù–ê–ó–í–ò —Ç–æ–≤–∞—Ä—ñ–≤? (C –∞–±–æ CDEF –æ–±'—î–¥–Ω–∞–Ω—ñ?)

    –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –º–µ–Ω—ñ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥ read_koshtorys_data()!
    """)

    wb.close()


if __name__ == '__main__':
    try:
        full_diagnostic_koshtorys('–ö–æ—à—Ç–æ—Ä–∏—Å.xlsx')
    except Exception as e:
        print(f"\n‚ùå –ü–û–ú–ò–õ–ö–ê: {e}")
        import traceback

        traceback.print_exc()
    finally:
        input("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è...")