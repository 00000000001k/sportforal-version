# event_common_fields.py
# -*- coding: utf-8 -*-

import customtkinter as ctk
import tkinter.messagebox as messagebox

# –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π —ñ–º–ø–æ—Ä—Ç - –±—É–¥–µ–º–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ
# from app import add_contract_to_current_event
from globals import FIELDS, EXAMPLES
from custom_widgets import CustomEntry
from gui_utils import bind_entry_shortcuts, create_context_menu
from state_manager import save_current_state

# –ü–æ–ª—è, —è–∫—ñ —î –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ –¥–ª—è –≤—Å—å–æ–≥–æ –∑–∞—Ö–æ–¥—É
COMMON_FIELDS = ["–∑–∞—Ö—ñ–¥", "–¥–∞—Ç–∞", "–∞–¥—Ä–µ—Å–∞"]

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Å–æ–±—ã—Ç–∏–π
# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {event_number: {"name": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "fields": {"–∑–∞—Ö—ñ–¥": "...", "–¥–∞—Ç–∞": "..."}}}
event_common_data = {}


def update_common_fields_display(event_name, event_number, tabview):
    """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    if event_name not in tabview._tab_dict:
        return

    tab_frame = tabview.tab(event_name)
    if not hasattr(tab_frame, 'common_entries'):
        return

    common_entries = tab_frame.common_entries
    event_data = event_common_data.get(event_number, {}).get("fields", {})

    for field_key, entry_widget in common_entries.items():
        if field_key in event_data:
            try:
                entry_widget.set_text(event_data[field_key])
                print(
                    f"[INFO] –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{field_key}' –¥–ª—è –∑–∞—Ö–æ–¥—É #{event_number} '{event_name}': {event_data[field_key]}")
            except Exception as e:
                print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è '{field_key}': {e}")


def create_common_fields_block(parent_frame, event_name, tabview, event_number):
    """
    –°—Ç–≤–æ—Ä—é—î –±–ª–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤ –¥–ª—è –∑–∞—Ö–æ–¥—É

    Args:
        parent_frame: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ñ—Ä–µ–π–º
        event_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        tabview: –æ–±—ä–µ–∫—Ç TabView
        event_number: –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è (–ù–û–í–´–ô –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ü–ê–†–ê–ú–ï–¢–†)
    """
    # –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–ª—ñ–≤
    common_frame = ctk.CTkFrame(parent_frame, border_width=2, border_color="green")
    common_frame.pack(pady=(5, 15), padx=5, fill="x")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –∫–Ω–æ–ø–∫–æ—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    header_frame = ctk.CTkFrame(common_frame, fg_color="transparent")
    header_frame.pack(fill="x", padx=10, pady=(10, 5))

    header_label = ctk.CTkLabel(header_frame,
                                text=f"üìã –ó–ê–ì–ê–õ–¨–ù–Ü –î–ê–ù–Ü –ó–ê–•–û–î–£ #{event_number}",
                                font=("Arial", 16, "bold"),
                                text_color="green")
    header_label.pack(side="top")

    # –ü—ñ–¥–∫–∞–∑–∫–∞
    info_label = ctk.CTkLabel(common_frame,
                              text="–¶—ñ –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–ø—ñ—é—é—Ç—å—Å—è —É –≤—Å—ñ –¥–æ–≥–æ–≤–æ—Ä–∏ —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É",
                              font=("Arial", 12),
                              text_color="gray60")
    info_label.pack(pady=(0, 10))

    # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—ñ–≤
    fields_frame = ctk.CTkFrame(common_frame, fg_color="transparent")
    fields_frame.pack(fill="x", padx=10, pady=(0, 10))

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª—è
    common_entries = {}
    context_menu = create_context_menu(common_frame)

    for i, field_key in enumerate(COMMON_FIELDS):
        # –õ–µ–π–±–ª
        label = ctk.CTkLabel(fields_frame,
                             text=f"<{field_key}>",
                             anchor="w",
                             width=100,
                             font=("Arial", 12, "bold"))
        label.grid(row=i, column=0, padx=5, pady=5, sticky="w")

        # –ü–æ–ª–µ –≤–≤–æ–¥—É
        entry = CustomEntry(fields_frame, field_name=field_key, examples_dict=EXAMPLES)
        entry.grid(row=i, column=1, padx=5, pady=5, sticky="ew")
        fields_frame.columnconfigure(1, weight=1)

        # –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∏
        hint_button = ctk.CTkButton(fields_frame,
                                    text="‚Ñπ",
                                    width=28,
                                    height=28,
                                    font=("Arial", 14),
                                    command=lambda h=EXAMPLES.get(field_key, "–ù–µ–º–∞—î –ø—ñ–¥–∫–∞–∑–∫–∏"), f=field_key:
                                    messagebox.showinfo(f"–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è <{f}>", h))
        hint_button.grid(row=i, column=2, padx=(0, 5), pady=5, sticky="e")

        # –ó–≤'—è–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é
        bind_entry_shortcuts(entry, context_menu)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–ª–µ
        common_entries[field_key] = entry

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å–æ–±—ã—Ç–∏—è
        if event_number in event_common_data and field_key in event_common_data[event_number].get("fields", {}):
            entry.set_text(event_common_data[event_number]["fields"][field_key])

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ (–ø–µ—Ä–µ–¥–∞–µ–º event_number)
        entry.bind("<KeyRelease>", lambda e, field=field_key: update_common_field(event_name, event_number, field, e))
        entry.bind("<FocusOut>", lambda e, field=field_key: update_common_field(event_name, event_number, field, e))

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∑–∞—Ö–æ–¥—É –ø–æ –Ω–æ–º–µ—Ä—É
    if event_number not in event_common_data:
        event_common_data[event_number] = {
            "name": event_name,
            "fields": {}
        }

    return common_frame, common_entries


def update_common_field(event_name, event_number, field_key, event):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–µ–µ –ø–æ–ª–µ —Å–æ–±—ã—Ç–∏—è

    Args:
        event_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        event_number: –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è (–ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†)
        field_key: –∫–ª—é—á –ø–æ–ª—è
        event: —Å–æ–±—ã—Ç–∏–µ tkinter
    """
    try:
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å –Ω–æ–º–µ—Ä–æ–º —Å–æ–±—ã—Ç–∏—è
        if event_number not in event_common_data:
            event_common_data[event_number] = {
                "name": event_name,
                "fields": {}
            }

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ø–æ–ª—è
        field_value = event.widget.get()

        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å–æ–±—ã—Ç–∏—è
        event_common_data[event_number]["fields"][field_key] = field_value

        print(f"[DEBUG] –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{field_key}' –¥–ª—è —Å–æ–±—ã—Ç–∏—è #{event_number}: '{field_value}'")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –ø–æ–ª—è: {e}")


def sync_common_fields_to_contracts(event_name, event_number):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª—è –∑ —É—Å—ñ–º–∞ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ –∑–∞—Ö–æ–¥—É"""
    from globals import document_blocks

    if event_number not in event_common_data:
        return

    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É
    event_blocks = [block for block in document_blocks if block.get("tab_name") == event_name]

    # –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥—ñ–ª—å–Ω—ñ –ø–æ–ª—è –≤ –∫–æ–∂–Ω–æ–º—É –±–ª–æ—Ü—ñ
    event_fields = event_common_data[event_number].get("fields", {})
    for block in event_blocks:
        entries = block.get("entries", {})
        for field_key in COMMON_FIELDS:
            if field_key in entries and field_key in event_fields:
                entry_widget = entries[field_key]
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
                current_state = entry_widget.cget("state")
                # –¢–∏–º—á–∞—Å–æ–≤–æ —Ä–æ–±–∏–º–æ –ø–æ–ª–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
                entry_widget.configure(state="normal")
                # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
                entry_widget.set_text(event_fields[field_key])
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
                entry_widget.configure(state=current_state)


def fill_common_fields_for_new_contract(event_name, event_number, contract_entries):
    """–ó–∞–ø–æ–≤–Ω—é—î –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É"""
    if event_number not in event_common_data:
        return

    event_fields = event_common_data[event_number].get("fields", {})
    for field_key in COMMON_FIELDS:
        if field_key in contract_entries and field_key in event_fields:
            entry_widget = contract_entries[field_key]
            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º —ñ–∑ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            entry_widget.set_text(event_fields[field_key])


def get_common_data_for_event(event_number):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞—Ö–æ–¥—É –ø–æ –Ω–æ–º–µ—Ä—É"""
    return event_common_data.get(event_number, {}).get("fields", {})


def set_common_data_for_event(event_number, event_name, data):
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞—Ö–æ–¥—É –ø–æ –Ω–æ–º–µ—Ä—É"""
    event_common_data[event_number] = {
        "name": event_name,
        "fields": data if isinstance(data, dict) else {}
    }


def remove_event_common_data(event_number):
    """–í–∏–¥–∞–ª—è—î –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞—Ö–æ–¥—É –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞—Ö–æ–¥—É –ø–æ –Ω–æ–º–µ—Ä—É"""
    if event_number in event_common_data:
        del event_common_data[event_number]


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def migrate_old_event_data():
    """–ú—ñ–≥—Ä—É—î –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É (–ø–æ —ñ–º–µ–Ω–∞—Ö) –≤ –Ω–æ–≤–∏–π (–ø–æ –Ω–æ–º–µ—Ä–∞—Ö)"""
    global event_common_data

    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    old_data = {}
    new_data = {}

    for key, value in event_common_data.items():
        if isinstance(key, str):  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –∫–ª—é—á —ç—Ç–æ –∏–º—è —Å–æ–±—ã—Ç–∏—è
            old_data[key] = value
        else:  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - –∫–ª—é—á —ç—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è
            new_data[key] = value

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–º–µ—Ä–∞—Ö - —Å–æ–∑–¥–∞–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
    if old_data and not new_data:
        print("[INFO] –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤...")
        temp_number = 1
        for event_name, event_data in old_data.items():
            new_data[temp_number] = {
                "name": event_name,
                "fields": event_data if isinstance(event_data, dict) else {}
            }
            temp_number += 1

        event_common_data = new_data
        print(f"[INFO] –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ {len(old_data)} –∑–∞—Ö–æ–¥—ñ–≤")


def get_event_number_by_name(event_name):
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞—Ö–æ–¥—É –ø–æ –π–æ–≥–æ —ñ–º–µ–Ω—ñ"""
    for event_number, event_data in event_common_data.items():
        if event_data.get("name") == event_name:
            return event_number
    return None