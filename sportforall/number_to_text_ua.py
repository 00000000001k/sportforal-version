# sportforall/number_to_text_ua.py

import math

# Словники для перетворення чисел в слова
# Чоловічий рід
MALE_UNITS = ["", "один", "два", "три", "чотири", "п'ять", "шість", "сім", "вісім", "дев'ять"]
MALE_TEENS = ["десять", "одинадцять", "дванадцять", "тринадцять", "чотирнадцять", "п'ятнадцять", "шістнадцять", "сімнадцять", "вісімнадцять", "дев'ятнадцять"]
MALE_TENS = ["", "", "двадцять", "тридцять", "сорок", "п'ятдесят", "шістдесят", "сімдесят", "вісімдесят", "дев'яносто"]

# Жіночий рід (для тисяч)
FEMALE_UNITS = ["", "одна", "дві", "три", "чотири", "п'ять", "шість", "сім", "вісім", "дев'ять"]

HUNDREDS = ["", "сто", "двісті", "триста", "чотириста", "п'ятсот", "шістсот", "сімсот", "вісімсот", "дев'ятсот"]

# Назви розрядів та їх рід
# (форма для 1, форма для 2-4, форма для 5-19 та 0, рід)
MAGNITUDES = {
    0: ("гривня", "гривні", "гривень", "м"), # Одиниці (чоловічий рід)
    1: ("тисяча", "тисячі", "тисяч", "ж"), # Тисячі (жіночий рід)
    2: ("мільйон", "мільйони", "мільйонів", "ч"), # Мільйони (чоловічий рід)
    3: ("мільярд", "мільярди", "мільярдів", "ч"), # Мільярди (чоловічий рід)
    # Можна додати трильйони тощо
}

KOPEK_MAGNITUDE = ("копійка", "копійки", "копійок", "ж") # Копійки (жіночий рід)


def _num_to_text_hundreds(number: int, gender: str) -> str:
    """
    Перетворює число від 1 до 999 у текстовий вигляд.
    Враховує рід для чисел 1 і 2 (для тисяч).
    """
    if not 0 <= number <= 999: # Дозволяємо 0 для внутрішнього використання
        return ""

    text_parts = []

    hundreds = number // 100
    if hundreds > 0:
        text_parts.append(HUNDREDS[hundreds])
        number %= 100

    if 10 <= number <= 19:
        # Числа від 10 до 19
        text_parts.append(MALE_TEENS[number - 10])
    else:
        # Десятки та одиниці
        tens = number // 10
        if tens > 0:
            text_parts.append(MALE_TENS[tens])
        units = number % 10
        if units > 0:
             # Особливі форми "одна", "дві" для жіночого роду і чисел 1, 2
             if gender == "ж" and units in [1, 2]:
                 text_parts.append(FEMALE_UNITS[units])
             else:
                 text_parts.append(MALE_UNITS[units])

    return " ".join(text_parts).strip()


def _get_magnitude_text(number: int, magnitude_info: tuple) -> str:
    """
    Визначає правильне закінчення для назви розряду (гривня, тисяча тощо).
    """
    one, two_four, five_many, gender = magnitude_info

    # Останні дві цифри
    last_two = number % 100
    # Остання цифра
    last_one = number % 10

    if 10 <= last_two <= 19:
        return five_many # 10-19 завжди "гривень", "тисяч" і т.д.
    elif last_one == 1:
        return one # Закінчення для 1 (крім 11)
    elif 2 <= last_one <= 4:
        return two_four # Закінчення для 2, 3, 4 (крім 12-14)
    else:
        return five_many # Закінчення для 0, 5-9 та 10-19


def number_to_currency_text(amount: float) -> str:
    """
    Перетворює числове значення грошової суми (гривні)
    у текстове представлення українською мовою.

    Args:
        amount: Сума у гривнях (напр., 1234.56).

    Returns:
        Текстове представлення суми (напр., "Одна тисяча двісті тридцять чотири гривні 56 копійок").
        Повертає повідомлення про помилку, якщо сума від'ємна або надто велика.
    """
    if amount < 0:
        return "Від'ємна сума"

    # Обмежуємо розмір числа, щоб уникнути переповнення або нескінченного циклу
    if amount > 10**12: # Приблизно трильйон
         return "Сума надто велика"

    # Розділяємо на цілу частину (гривні) та дробову (копійки)
    # Округляємо до 2 знаків після коми перед розділенням
    amount_rounded = round(amount, 2)
    гривні = int(amount_rounded)
    копійки = int(round((amount_rounded - гривні) * 100)) # Копійки як ціле число від 0 до 99

    # Випадок точно 0 гривень 00 копійок
    if гривні == 0 and копійки == 0:
         return f"Нуль {_get_magnitude_text(0, MAGNITUDES[0])} 00 {KOPEK_MAGNITUDE[2]}".capitalize() # "Нуль гривень 00 копійок"


    text_parts_гривні = []

    # Перетворюємо цілу частину (гривні)
    remaining_гривні = гривні
    magnitude_level = 0 # 0 - одиниці, 1 - тисячі, 2 - мільйони...

    while remaining_гривні > 0:
         # Беремо останні 3 цифри (групу розряду)
         group_of_three = remaining_гривні % 1000
         remaining_гривні //= 1000

         if group_of_three > 0:
             # Перетворюємо групу з 3 цифр у текст
             # Визначаємо рід для цього розряду (гривні, тисячі, мільйони...)
             gender = MAGNITUDES.get(magnitude_level, ("","", "", "м"))[3] # За замовчуванням чоловічий, якщо розряд не визначено
             text_group = _num_to_text_hundreds(group_of_three, gender)

             # Додаємо назву розряду (тисяча, мільйон...) з правильним закінченням
             if magnitude_level > 0: # Не додаємо назву розряду для одиниць (гривень)
                  magnitude_info = MAGNITUDES.get(magnitude_level)
                  if magnitude_info: # Якщо розряд визначено в словнику MAGNITUDES
                       magnitude_text = _get_magnitude_text(group_of_three, magnitude_info)
                       # Додаємо назву розряду після числа групи
                       text_group = f"{text_group} {magnitude_text}"
                  # else: # Якщо розряд не визначено (напр., трильйони, які не в словнику)
                       # Можна додати логіку для обробки невизначених розрядів
                       # print(f"Попередження: Розряд величини {magnitude_level} не визначено в словнику MAGNITUDES.")


             # Додаємо текст групи до загального списку (вставляємо на початок, бо йдемо від менших розрядів)
             text_parts_гривні.insert(0, text_group)

         magnitude_level += 1

    # Додаємо назву "гривня" до цілої частини, якщо гривень > 0
    if гривні > 0:
         magnitude_text_гривні = _get_magnitude_text(гривні, MAGNITUDES[0])
         # Шукаємо останній елемент у списку text_parts_гривні, який є числом, і додаємо до нього "гривня"
         # Або просто додаємо в кінець списку
         text_parts_гривні.append(magnitude_text_гривні)


    # Об'єднуємо частини цілої суми
    гривні_текст = " ".join(text_parts_гривні).strip()

    # Перетворюємо дробову частину (копійки)
    копійки_текст = str(копійки).zfill(2) # Форматуємо копійки завжди двома цифрами (напр., "05", "50")

    # Визначаємо правильне закінчення для "копійка"
    копійки_назва = _get_magnitude_text(копійки, KOPEK_MAGNITUDE)

    копійки_текст_повністю = f"{копійки_текст} {копійки_назва}"

    # Формуємо кінцевий рядок
    final_text = f"{гривні_текст} {копійки_текст_повністю}".strip()


    return final_text.capitalize() # Починаємо з великої літери


# Приклади використання (для тестування)
if __name__ == "__main__":
    test_sums = [
        0.00, 0.01, 0.02, 0.05, 0.10, 0.99, 1.00, 1.01, 1.10, 1.25, 1.99,
        5.00, 10.00, 11.00, 15.00, 20.00, 21.00, 22.00, 30.00, 40.00, 50.00, 99.00, 100.00,
        101.00, 110.00, 123.00, 200.00, 350.00, 500.00, 999.00, 1000.00, 1001.00,
        1021.00, 1100.00, 1234.56, 2000.00, 5000.00, 10000.00, 10001.00, 10021.00,
        21500.75, 100000.00, 123456.78, 1000000.00, 1000001.00, 2500000.00,
        1234567.89, 1000000000.00, 1000000001.00, 1234567890.12,
        1000000000000.00, 1234567890123.45, # Приклад надто великої суми для словника розрядів
        -100.00 # Приклад від'ємної суми
    ]

    for sum_val in test_sums:
        text_representation = number_to_currency_text(sum_val)
        print(f"{sum_val:>15.2f} грн -> {text_representation}")