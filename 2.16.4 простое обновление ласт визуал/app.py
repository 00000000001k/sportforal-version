# app.py

import customtkinter as ctk
import tkinter.messagebox as messagebox

from globals import version, name_prog, document_blocks
from state_manager import (
    save_current_state,
    setup_auto_save,
    load_application_state,
    restore_application_state
)
from generation import combined_generation_process, get_all_placeholders_from_blocks
from events import add_event, remove_tab
from document_block import create_document_fields_block
import koshtorys
from excel_export import export_document_data_to_excel
from generation import generate_documents_word
from template_loader import get_available_templates

# === –î–û–î–ê–ù–û –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–• –û–ù–û–í–õ–ï–ù–¨ ===
from ctk_update_manager import setup_auto_updates


# === –ö–Ü–ù–ï–¶–¨ –î–û–î–ê–í–ê–ù–ù–Ø ===


def get_current_dynamic_fields(tabview):
    """–û—Ç—Ä–∏–º—É—î –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ª—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É"""
    current_event = tabview.get()
    if not current_event:
        return []

    relevant_blocks = [b for b in document_blocks if b.get("tab_name") == current_event]
    if not relevant_blocks:
        return []

    dynamic_fields = get_all_placeholders_from_blocks(relevant_blocks)
    return dynamic_fields


def launch_main_app():
    global main_app_root, tabview, event_name_entry, update_manager

    ctk.set_appearance_mode("light")
    ctk.set_default_color_theme("green")

    main_app_root = ctk.CTk()
    main_app_root.title(name_prog + version)
    main_app_root.geometry("1200x750")

    update_manager = setup_auto_updates(main_app_root, version)

    # --- –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å ---
    top_controls_frame = ctk.CTkFrame(main_app_root)
    top_controls_frame.pack(pady=10, padx=10, fill="x")

    # Tabview (–≤–∫–ª–∞–¥–∫–∏ –∑–∞—Ö–æ–¥—ñ–≤)
    tabview = ctk.CTkTabview(main_app_root)
    tabview.pack(fill="both", expand=True, padx=10, pady=10)

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
    saved_state = load_application_state()
    if saved_state:
        restore_application_state(saved_state, tabview, main_app_root)
    else:
        print("[INFO] –ó–∞–ø—É—Å–∫ –∑ —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")

    # –í–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –∑–∞—Ö–æ–¥—É
    event_input_frame = ctk.CTkFrame(top_controls_frame)
    event_input_frame.pack(side="left", fill="x", expand=True, padx=5)

    event_name_entry = ctk.CTkEntry(event_input_frame, placeholder_text="–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É", width=250)
    event_name_entry.pack(side="left", padx=5, fill="x", expand=True)

    def on_add_event_from_entry():
        name = event_name_entry.get().strip()
        if name:
            add_event(name, tabview)
            event_name_entry.delete(0, 'end')
            save_current_state(document_blocks, tabview)
        else:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–∞–∑–≤–∞ –∑–∞—Ö–æ–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é!")

    ctk.CTkButton(event_input_frame, text="‚ûï –î–æ–¥–∞—Ç–∏", width=80, command=on_add_event_from_entry).pack(side="left", padx=5)

    # –Ü–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ —à–∞–±–ª–æ–Ω—ñ–≤ —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É)
    ctk.CTkButton(top_controls_frame, text="–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–æ–≥–æ–≤–æ—Ä–∏",
                  command=lambda: generate_documents_word(tabview)).pack(padx=5, pady=5, side="left")

    ctk.CTkButton(top_controls_frame, text="üí∞ –ö–æ—à—Ç–æ—Ä–∏—Å",
                  command=lambda: koshtorys.fill_koshtorys(document_blocks),
                  fg_color="#FF9800").pack(side="left", padx=5)

    def export_excel_with_dynamic_fields():
        try:
            dynamic_fields = get_current_dynamic_fields(tabview)
            if not dynamic_fields:
                messagebox.showwarning("–£–≤–∞–≥–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—ñ–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É. –î–æ–¥–∞–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É –¥–æ–≥–æ–≤–æ—Ä–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏.")
                return
            success = export_document_data_to_excel(document_blocks, dynamic_fields)
            if success:
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "Excel —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ Excel —Ñ–∞–π–ª")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ Excel: {e}")

    ctk.CTkButton(top_controls_frame, text="üì• Excel",
                  command=export_excel_with_dynamic_fields,
                  fg_color="#00BCD4").pack(side="left", padx=5)

    def check_updates():
        try:
            update_manager.check_updates_manual()
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")

    ctk.CTkButton(top_controls_frame, text="üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è",
                  command=check_updates,
                  fg_color="#9C27B0", width=100).pack(side="left", padx=5)

    def show_dynamic_fields():
        try:
            dynamic_fields = get_current_dynamic_fields(tabview)
            if dynamic_fields:
                fields_text = "\n".join([f"‚Ä¢ {field}" for field in dynamic_fields])
                messagebox.showinfo("–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–ª—è", f"–î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–æ–ª—è –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞—Ö–æ–¥—ñ:\n\n{fields_text}")
            else:
                messagebox.showinfo("–ü–æ–ª—è", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤. –î–æ–¥–∞–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏ –∑ —à–∞–±–ª–æ–Ω–∞–º–∏.")
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–ª—ñ–≤: {e}")

    ctk.CTkButton(top_controls_frame, text="üîç –ü–æ–ª—è",
                  command=show_dynamic_fields,
                  fg_color="#607D8B", width=80).pack(side="left", padx=5)

    ctk.CTkLabel(top_controls_frame, text=version, text_color="gray", font=("Arial", 12)).pack(side="right", padx=10)

    setup_auto_save(main_app_root, document_blocks, tabview)

    return main_app_root, tabview


# –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –ø—Ä–æ–≥—Ä–∞–º–∏
def manual_save():
    """–†—É—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É"""
    try:
        save_current_state(document_blocks, tabview)
        messagebox.showinfo("–£—Å–ø—ñ—Ö", "–°—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω:\n{e}")


def clear_all_data():
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö (–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º)"""
    result = messagebox.askyesno(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
        "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ?\n–¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!"
    )

    if result:
        from state_manager import clear_saved_state
        clear_saved_state()
        messagebox.showinfo("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è", "–ó–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É.")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
    app_root, app_tabview = launch_main_app()

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    main_app_root = app_root
    tabview = app_tabview

    # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
    app_root.mainloop()