# events.py

import customtkinter as ctk
import tkinter.messagebox as messagebox
from template_loader import get_available_templates
from document_block import create_document_fields_block
from globals import document_blocks
from state_manager import save_current_state


def add_event(event_name, tabview):
    """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –∑–∞—Ö—ñ–¥ –∑ –ø–∞–Ω–µ–ª–ª—é –≤–∏–±–æ—Ä—É —à–∞–±–ª–æ–Ω—ñ–≤"""

    if event_name in [tabview.tab(tab_name) for tab_name in tabview._tab_dict.keys()]:
        messagebox.showwarning("–£–≤–∞–≥–∞", f"–ó–∞—Ö—ñ–¥ '{event_name}' –≤–∂–µ —ñ—Å–Ω—É—î!")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≤–∫–ª–∞–¥–∫—É
    tab = tabview.add(event_name)

    # === –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è —à–∞–±–ª–æ–Ω–∞–º–∏ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É ===
    template_control_frame = ctk.CTkFrame(tab)
    template_control_frame.pack(fill="x", padx=10, pady=(10, 5))

    # –ú—ñ—Ç–∫–∞
    ctk.CTkLabel(template_control_frame, text="–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω:", font=("Arial", 12, "bold")).pack(side="left",
                                                                                                  padx=(10, 5))

    # –í–∏–ø–∞–¥–∞—é—á–∏–π —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤ –∑ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
    template_var = ctk.StringVar()

    # –°–ø–æ—á–∞—Ç–∫—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —à–∞–±–ª–æ–Ω–∏
    initial_templates = get_available_templates()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω—é
    template_menu = ctk.CTkOptionMenu(
        template_control_frame,
        variable=template_var,
        values=list(initial_templates.keys()) if initial_templates else ["–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤"],
        width=200
    )
    template_menu.pack(side="left", padx=5)

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    if initial_templates:
        template_var.set(list(initial_templates.keys())[0])
    else:
        template_var.set("–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤")

    # –¢–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è menu)
    def refresh_templates():
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω—ñ–≤"""
        try:
            templates_dict = get_available_templates()
            if templates_dict:
                template_names = list(templates_dict.keys())
                template_menu.configure(values=template_names)
                if not template_var.get() or template_var.get() not in template_names:
                    template_var.set(template_names[0])
                return templates_dict
            else:
                template_menu.configure(values=["–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤"])
                template_var.set("–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤")
                return {}
        except Exception as e:
            print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤: {e}")
            template_menu.configure(values=["–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"])
            template_var.set("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è")
            return {}

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —à–∞–±–ª–æ–Ω–∏
    templates_dict = initial_templates

    # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤
    def on_refresh_templates():
        nonlocal templates_dict
        templates_dict = refresh_templates()
        messagebox.showinfo("–û–Ω–æ–≤–ª–µ–Ω–æ", f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(templates_dict)} —à–∞–±–ª–æ–Ω—ñ–≤")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–ª tooltip_text
    refresh_button = ctk.CTkButton(
        template_control_frame,
        text="üîÑ",
        width=30,
        height=30,
        command=on_refresh_templates
    )
    refresh_button.pack(side="left", padx=2)

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É
    def add_contract_to_this_event():
        """–î–æ–¥–∞—î –¥–æ–≥–æ–≤—ñ—Ä –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Ö–æ–¥—É"""
        selected_template = template_var.get()

        if not selected_template or selected_template in ["–ù–µ–º–∞—î —à–∞–±–ª–æ–Ω—ñ–≤", "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"]:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å –≤–∞–ª—ñ–¥–Ω–∏–π —à–∞–±–ª–æ–Ω!")
            return

        # –û–Ω–æ–≤–ª—é—î–º–æ —à–∞–±–ª–æ–Ω–∏ –Ω–∞ –≤—Å—è–∫–∏–π –≤–∏–ø–∞–¥–æ–∫
        current_templates = get_available_templates()
        template_path = current_templates.get(selected_template)

        if not template_path:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–®–∞–±–ª–æ–Ω '{selected_template}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫.")
            return

        # –î–æ–¥–∞—î–º–æ –¥–æ–≥–æ–≤—ñ—Ä
        create_document_fields_block(contracts_frame, tabview, template_path)
        print(f"[INFO] –î–æ–≥–æ–≤—ñ—Ä –¥–æ–¥–∞–Ω–æ –∑ —à–∞–±–ª–æ–Ω–æ–º: {selected_template}")

    ctk.CTkButton(
        template_control_frame,
        text="‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ–≥–æ–≤—ñ—Ä",
        command=add_contract_to_this_event,
        fg_color="#2E8B57",
        hover_color="#228B22"
    ).pack(side="left", padx=10)

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –º—ñ—Ç–∫–∞
    info_label = ctk.CTkLabel(
        template_control_frame,
        text=f"–®–∞–±–ª–æ–Ω—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {len(templates_dict)}",
        text_color="gray60",
        font=("Arial", 10)
    )
    info_label.pack(side="left", padx=10)

    # === –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ ===
    contracts_frame = ctk.CTkScrollableFrame(tab, label_text=f"–î–æ–≥–æ–≤–æ—Ä–∏ –∑–∞—Ö–æ–¥—É: {event_name}")
    contracts_frame.pack(fill="both", expand=True, padx=10, pady=5)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    tab.contracts_frame = contracts_frame
    tab.template_var = template_var
    tab.templates_dict = templates_dict
    tab.refresh_templates = refresh_templates

    print(f"[INFO] –°—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞—Ö—ñ–¥ '{event_name}' –∑ {len(templates_dict)} –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏")


def remove_tab(tab_name, tabview):
    """–í–∏–¥–∞–ª—è—î –≤–∫–ª–∞–¥–∫—É –∑–∞—Ö–æ–¥—É"""
    result = messagebox.askyesno(
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—Ö—ñ–¥ '{tab_name}'?\n"
        "–í—Å—ñ –¥–æ–≥–æ–≤–æ—Ä–∏ —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ!"
    )

    if result:
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —Ü—å–æ–≥–æ –∑–∞—Ö–æ–¥—É
        global document_blocks
        document_blocks = [block for block in document_blocks if block.get("tab_name") != tab_name]

        # –í–∏–¥–∞–ª—è—î–º–æ –≤–∫–ª–∞–¥–∫—É
        tabview.delete(tab_name)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
        save_current_state(document_blocks, tabview)

        print(f"[INFO] –ó–∞—Ö—ñ–¥ '{tab_name}' –≤–∏–¥–∞–ª–µ–Ω–æ")
        messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ó–∞—Ö—ñ–¥ '{tab_name}' –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")


def get_event_contracts_count(event_name):
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ —É –∑–∞—Ö–æ–¥—ñ"""
    return len([block for block in document_blocks if block.get("tab_name") == event_name])


def get_all_events():
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞—Ö–æ–¥—ñ–≤"""
    # –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ tabview
    pass