# document_block.py 

import os
import tkinter.messagebox as messagebox
import customtkinter as ctk
from tkinter import filedialog
import json

from globals import EXAMPLES, document_blocks
from gui_utils import bind_entry_shortcuts, create_context_menu
from custom_widgets import CustomEntry
from text_utils import number_to_ukrainian_text
from data_persistence import get_template_memory, load_memory
from state_manager import save_current_state
from event_common_fields import fill_common_fields_for_new_contract, COMMON_FIELDS
from generation import enhanced_extract_placeholders_from_word

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Å–æ–∑–¥–∞—é—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
global_event_fields = {}
global_event_frame = None

# –ü–æ–ª—è —Ç–æ–≤–∞—Ä–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
PRODUCT_FIELDS = {
    "—Ç–æ–≤–∞—Ä": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏",
    "–¥–∫": "–î–ö –∫–æ–¥ —Ç–æ–≤–∞—Ä–∞",
    "–∫—ñ–ª—å–∫—ñ—Å—Ç—å": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
    "–æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è",
    "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é": "–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É",
    "—Å—É–º–∞": "–°—É–º–º–∞ –ø–æ —Ç–æ–≤–∞—Ä—É",
    "–ø–¥–≤": "–ù–î–°"
}


def create_global_event_fields(parent_frame, tabview):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    global global_event_fields, global_event_frame

    # –ï—Å–ª–∏ –ø–æ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–∏, –Ω–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    current_tab = tabview.get()
    if current_tab in global_event_fields:
        return global_event_fields[current_tab]

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
    event_fields_data = [
        ("–∑–∞—Ö—ñ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        ("–¥–∞—Ç–∞", "–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"),
        ("–∞–¥—Ä–µ—Å–∞", "–ê–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    ]

    current_event_entries = {}
    general_memory = load_memory()

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ entry-–ø–æ–ª—è (–æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è)
    for field_key, description in event_fields_data:
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        entry = CustomEntry(parent_frame, field_name=field_key, examples_dict=EXAMPLES)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        saved_value = general_memory.get(field_key)
        if saved_value:
            entry.set_text(saved_value)

        current_event_entries[field_key] = entry

        # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ (–Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ pack/grid)
        entry.pack_forget()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if current_tab not in global_event_fields:
        global_event_fields[current_tab] = {}

    global_event_fields[current_tab] = current_event_entries
    global_event_frame = None  # –ù–µ—Ç –≤–∏–¥–∏–º–æ–≥–æ —Ñ—Ä–µ–π–º–∞

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    fill_common_fields_for_new_contract(current_tab, current_event_entries)

    return current_event_entries


def get_global_event_fields(tab_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
    return global_event_fields.get(tab_name, {})


def create_products_table_widget(parent_frame, products_data=None):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω—É —Ä–µ–¥–∞–≥–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è document_block.py"""

    # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ —Ç–æ–≤–∞—Ä—ñ–≤
    products_frame = ctk.CTkFrame(parent_frame)
    products_frame.pack(fill="both", expand=True, padx=5, pady=5)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    header_label = ctk.CTkLabel(products_frame, text="üõí –¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤/–ø–æ—Å–ª—É–≥",
                                font=("Arial", 16, "bold"), text_color="#FF6B35")
    header_label.pack(pady=(10, 5))

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–∫—Ä–æ–ª—ñ–Ω–≥—É
    scrollable_frame = ctk.CTkScrollableFrame(products_frame, height=400)
    scrollable_frame.pack(fill="both", expand=True, padx=10, pady=5)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤
    headers_frame = ctk.CTkFrame(scrollable_frame, fg_color="gray25")
    headers_frame.pack(fill="x", pady=(0, 5))

    headers = ["‚Ññ", "–¢–æ–≤–∞—Ä/–ü–æ—Å–ª—É–≥–∞", "–î–ö-021:2015", "–ö—ñ–ª-—Ç—å", "–û–¥.–≤–∏–º.", "–¶—ñ–Ω–∞ –∑–∞ –æ–¥.", "–°—É–º–∞", "–î—ñ—ó"]
    header_widths = [40, 250, 120, 80, 100, 100, 100, 80]

    for i, (header, width) in enumerate(zip(headers, header_widths)):
        label = ctk.CTkLabel(headers_frame, text=header, width=width,
                             font=("Arial", 12, "bold"))
        label.grid(row=0, column=i, padx=2, pady=5, sticky="ew")

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä—è–¥–∫—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤
    product_rows = []

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—ñ–≤
    from gui_utils import create_context_menu, bind_entry_shortcuts
    context_menu = create_context_menu(products_frame)

    def calculate_row_total(row_index):
        """–ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î —Å—É–º—É –¥–ª—è —Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä—É"""
        try:
            if row_index >= len(product_rows):
                return

            row_data = product_rows[row_index]
            qty_text = row_data["entries"]["–∫—ñ–ª—å–∫—ñ—Å—Ç—å"].get().replace(",", ".").strip()
            price_text = row_data["entries"]["—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"].get().replace(",", ".").strip()

            qty = float(qty_text) if qty_text else 0
            price = float(price_text) if price_text else 0
            total = qty * price

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ —Å—É–º–∏ –¥–ª—è —Ä—è–¥–∫–∞
            sum_entry = row_data["entries"]["—Å—É–º–∞"]
            sum_entry.configure(state="normal")
            sum_entry.delete(0, "end")
            sum_entry.insert(0, f"{total:.2f}")
            sum_entry.configure(state="readonly")

            # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É
            update_total_display()

        except (ValueError, AttributeError):
            pass

    def add_product_row(product_data=None):
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—É"""
        row_index = len(product_rows)

        # –§—Ä–µ–π–º –¥–ª—è —Ä—è–¥–∫–∞ —Ç–æ–≤–∞—Ä—É
        row_frame = ctk.CTkFrame(scrollable_frame, fg_color="transparent")
        row_frame.pack(fill="x", pady=1)

        # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è entry –ø–æ–ª—ñ–≤ —Ä—è–¥–∫–∞
        row_entries = {}

        # –ù–æ–º–µ—Ä —Ä—è–¥–∫–∞
        num_label = ctk.CTkLabel(row_frame, text=str(row_index + 1), width=40)
        num_label.grid(row=0, column=0, padx=2, pady=2)

        # –ü–æ–ª—è —Ç–æ–≤–∞—Ä—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏ –∑–≥—ñ–¥–Ω–æ PRODUCT_FIELDS
        fields = [
            ("—Ç–æ–≤–∞—Ä", 250),
            ("–¥–∫", 120),
            ("–∫—ñ–ª—å–∫—ñ—Å—Ç—å", 80),
            ("–æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É", 100),
            ("—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é", 100),
            ("—Å—É–º–∞", 100)
        ]

        for col, (field_name, width) in enumerate(fields, 1):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CustomEntry –∑–∞–º—ñ—Å—Ç—å ctk.CTkEntry
            entry = CustomEntry(row_frame, field_name=field_name, examples_dict=EXAMPLES, width=width)
            entry.grid(row=0, column=col, padx=2, pady=2, sticky="ew")
            row_entries[field_name] = entry

            # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω–∏–º–∏ —è–∫—â–æ —î
            if product_data and field_name in product_data:
                entry.insert(0, str(product_data[field_name]))

            # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é —Ç–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
            bind_entry_shortcuts(entry, context_menu)

            # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø–æ–¥—ñ—ó –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É
            if field_name in ["–∫—ñ–ª—å–∫—ñ—Å—Ç—å", "—Ü—ñ–Ω–∞ –∑–∞ –æ–¥–∏–Ω–∏—Ü—é"]:
                entry.bind("<KeyRelease>", lambda e, idx=row_index: calculate_row_total(idx))
                entry.bind("<FocusOut>", lambda e, idx=row_index: calculate_row_total(idx))

        # –†–æ–±–∏–º–æ –ø–æ–ª–µ —Å—É–º–∏ readonly
        row_entries["—Å—É–º–∞"].configure(state="readonly", fg_color=("gray90", "gray20"))

        # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä—è–¥–∫–∞
        def remove_row():
            if len(product_rows) > 1:  # –ó–∞–ª–∏—à–∞—î–º–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫
                row_frame.destroy()
                product_rows.pop(row_index)
                update_row_numbers()
                update_total_display()
            else:
                import tkinter.messagebox as messagebox
                messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–ü–æ–≤–∏–Ω–µ–Ω –∑–∞–ª–∏—à–∏—Ç–∏—Å—è —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—É")

        remove_btn = ctk.CTkButton(row_frame, text="üóë", width=30, height=25,
                                   fg_color="red", hover_color="darkred", command=remove_row)
        remove_btn.grid(row=0, column=len(fields) + 1, padx=2, pady=2)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ä—è–¥–∫–∞
        row_data = {
            "frame": row_frame,
            "entries": row_entries,
            "remove_btn": remove_btn,
            "num_label": num_label
        }
        product_rows.append(row_data)

        # –ü–µ—Ä–≤–∏–Ω–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
        calculate_row_total(row_index)
        return row_data

    def update_row_numbers():
        """–û–Ω–æ–≤–ª—é—î –Ω–æ–º–µ—Ä–∏ —Ä—è–¥–∫—ñ–≤ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
        for i, row_data in enumerate(product_rows):
            row_data["num_label"].configure(text=str(i + 1))

    def add_new_product():
        """–î–æ–¥–∞—î –Ω–æ–≤–∏–π –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ —Ç–æ–≤–∞—Ä—É"""
        add_product_row()

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü–µ—é
    buttons_frame = ctk.CTkFrame(products_frame, fg_color="transparent")
    buttons_frame.pack(fill="x", padx=10, pady=5)

    add_btn = ctk.CTkButton(buttons_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", command=add_new_product,
                            fg_color="#2E8B57", hover_color="#228B22")
    add_btn.pack(side="left", padx=5)

    def clear_all_products():
        """–û—á–∏—â–∞—î –≤—Å—ñ —Ä—è–¥–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤"""
        import tkinter.messagebox as messagebox
        result = messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏?")
        if result:
            for row_data in product_rows[:]:
                row_data["frame"].destroy()
            product_rows.clear()
            add_product_row()  # –î–æ–¥–∞—î–º–æ –æ–¥–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

    clear_btn = ctk.CTkButton(buttons_frame, text="üóë –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å–µ", command=clear_all_products,
                              fg_color="#DC3545", hover_color="#C82333")
    clear_btn.pack(side="left", padx=5)

    # –ü–æ–ª–µ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total_frame = ctk.CTkFrame(products_frame, fg_color="transparent")
    total_frame.pack(fill="x", padx=10, pady=5)

    total_label = ctk.CTkLabel(total_frame, text="–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:", font=("Arial", 14, "bold"))
    total_label.pack(side="left", padx=5)

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ CustomEntry –¥–ª—è –ø–æ–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    total_entry = CustomEntry(total_frame, field_name="—Ä–∞–∑–æ–º", examples_dict=EXAMPLES, width=120)
    total_entry.pack(side="left", padx=5)
    total_entry.configure(state="readonly", fg_color=("gray90", "gray20"))

    # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é –¥–æ –ø–æ–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏
    bind_entry_shortcuts(total_entry, context_menu)

    def update_total_display():
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏"""
        total_sum = 0
        for row_data in product_rows:
            try:
                sum_text = row_data["entries"]["—Å—É–º–∞"].get().replace(",", ".").strip()
                if sum_text:
                    total_sum += float(sum_text)
            except (ValueError, AttributeError):
                pass

        total_entry.configure(state="normal")
        total_entry.delete(0, "end")
        total_entry.insert(0, f"{total_sum:.2f}")
        total_entry.configure(state="readonly")
        return total_sum

    def get_products_data():
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–Ω–∏–∫—ñ–≤"""
        products = []
        for row_data in product_rows:
            product = {}
            for field_name, entry in row_data["entries"].items():
                value = entry.get().strip()
                product[field_name] = value

            # –î–æ–¥–∞—î–º–æ —Ç–æ–≤–∞—Ä —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –Ω–∞–∑–≤–∞ –∞–±–æ –∫–æ–¥
            if product.get("—Ç–æ–≤–∞—Ä") or product.get("–¥–∫"):
                products.append(product)

        return products

    def set_products_data(products_data):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤"""
        # –û—á–∏—â–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ä—è–¥–∫–∏
        for row_data in product_rows[:]:
            row_data["frame"].destroy()
        product_rows.clear()

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏
        if products_data and len(products_data) > 0:
            for product in products_data:
                add_product_row(product)
        else:
            add_product_row()  # –î–æ–¥–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫

        update_total_display()

    def get_total_sum():
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É"""
        return update_total_display()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ä—è–¥–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤
    if products_data and len(products_data) > 0:
        for product in products_data:
            add_product_row(product)
    else:
        add_product_row()  # –î–æ–¥–∞—î–º–æ –æ–¥–∏–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ –∑ —É—Å—ñ–º–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Ç–∞ –æ–±'—î–∫—Ç–∞–º–∏
    return {
        "frame": products_frame,
        "get_data": get_products_data,
        "set_data": set_products_data,
        "total_entry": total_entry,
        "update_total": update_total_display,
        "get_total_sum": get_total_sum,
        "product_rows": product_rows,
        "context_menu": context_menu
    }




def create_document_fields_block(parent_frame, tabview=None, template_path=None):
    if not tabview:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "TabView –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π")
        return

    if not template_path:
        template_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å —à–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä—É",
            filetypes=[("Word Documents", "*.docm *.docx")]
        )
        if not template_path:
            return

    try:
        dynamic_fields = enhanced_extract_placeholders_from_word(template_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ <—Ç–∞–±–ª–∏—Ü—è_—Ç–æ–≤–∞—Ä—ñ–≤>
        has_products_table = "<—Ç–∞–±–ª–∏—Ü—è_—Ç–æ–≤–∞—Ä—ñ–≤>" in open(template_path, 'rb').read().decode('utf-8', errors='ignore')

        if not dynamic_fields and not has_products_table:
            messagebox.showwarning("–£–≤–∞–≥–∞",
                                   f"–£ —à–∞–±–ª–æ–Ω—ñ {os.path.basename(template_path)} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —Ç–∏–ø—É <–ø–æ–ª–µ> –∞–±–æ <—Ç–∞–±–ª–∏—Ü—è_—Ç–æ–≤–∞—Ä—ñ–≤>.\n"
                                   "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É —à–∞–±–ª–æ–Ω—ñ —î –ø–æ–ª—è —É —Ñ–æ—Ä–º–∞—Ç—ñ <–Ω–∞–∑–≤–∞_–ø–æ–ª—è> –∞–±–æ <—Ç–∞–±–ª–∏—Ü—è_—Ç–æ–≤–∞—Ä—ñ–≤>")
            return

    except Exception as e:
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —à–∞–±–ª–æ–Ω:\n{e}")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    global_entries = create_global_event_fields(parent_frame, tabview)

    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ –¥–ª—è –ø–æ–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
    block_frame = ctk.CTkFrame(parent_frame, border_width=1, border_color="gray70")
    block_frame.pack(pady=10, padx=5, fill="both", expand=True)

    header_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
    header_frame.pack(fill="x", padx=5, pady=(5, 0))

    products_info = f" + —Ç–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤" if has_products_table else ""
    path_label = ctk.CTkLabel(header_frame,
                              text=f"–®–∞–±–ª–æ–Ω: {os.path.basename(template_path)} ({len(dynamic_fields)} –ø–æ–ª—ñ–≤{products_info})",
                              text_color="blue", anchor="w", wraplength=800)
    path_label.pack(side="left", padx=(0, 5), expand=True, fill="x")

    current_block_entries = {}
    template_specific_memory = get_template_memory(template_path)
    general_memory = load_memory()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ (–∏—Å–∫–ª—é—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–ª—è)
    global_event_field_names = ["–∑–∞—Ö—ñ–¥", "–¥–∞—Ç–∞", "–∞–¥—Ä–µ—Å–∞"]
    product_field_names = list(PRODUCT_FIELDS.keys())

    # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–Ω—ã–µ –ø–æ–ª—è –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    contract_fields = [field for field in dynamic_fields
                       if field not in global_event_field_names
                       and field not in product_field_names]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—â–∏–µ –ø–æ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ)
    template_common_fields = [field for field in contract_fields if field in COMMON_FIELDS]

    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    main_context_menu = create_context_menu(block_frame)

    # –ë–õ–û–ö –û–ë–©–ò–• –ü–û–õ–ï–ô –î–û–ì–û–í–û–†–ê (–∫—Ä–æ–º–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)
    if template_common_fields:
        common_data_frame = ctk.CTkFrame(block_frame)
        common_data_frame.pack(fill="x", padx=5, pady=5)

        common_label = ctk.CTkLabel(common_data_frame, text="üìã –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä–∞",
                                    font=("Arial", 14, "bold"), text_color="#FF6B35")
        common_label.pack(pady=(10, 5))

        common_grid_frame = ctk.CTkFrame(common_data_frame, fg_color="transparent")
        common_grid_frame.pack(fill="x", padx=10, pady=(0, 10))

        for i, field_key in enumerate(template_common_fields):
            label = ctk.CTkLabel(common_grid_frame, text=f"<{field_key}>", anchor="w", width=140,
                                 font=("Arial", 12, "bold"), text_color="#FF6B35")
            label.grid(row=i, column=0, padx=5, pady=3, sticky="w")

            entry = CustomEntry(common_grid_frame, field_name=field_key, examples_dict=EXAMPLES)
            entry.grid(row=i, column=1, padx=5, pady=3, sticky="ew")
            common_grid_frame.columnconfigure(1, weight=1)

            saved_value = template_specific_memory.get(field_key, general_memory.get(field_key))
            if saved_value is not None:
                entry.set_text(saved_value)

            bind_entry_shortcuts(entry, main_context_menu)
            current_block_entries[field_key] = entry

            hint_text = EXAMPLES.get(field_key, f"–û–±—â–µ–µ –ø–æ–ª–µ –¥–æ–≥–æ–≤–æ—Ä–∞: {field_key}")
            hint_button = ctk.CTkButton(common_grid_frame, text="‚Ñπ", width=28, height=28, font=("Arial", 14),
                                        command=lambda h=hint_text, f=field_key:
                                        messagebox.showinfo(f"–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è <{f}>", h))
            hint_button.grid(row=i, column=2, padx=(0, 5), pady=3, sticky="e")

    # –¢–ê–ë–õ–ò–¶–ê –¢–û–í–ê–†–û–í (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä)
    products_widget = None
    if has_products_table:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
        saved_products = []
        if template_path in [block.get("path") for block in document_blocks]:
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫ —Å —ç—Ç–∏–º —à–∞–±–ª–æ–Ω–æ–º
            for block in document_blocks:
                if block.get("path") == template_path and "products" in block.get("entries", {}):
                    saved_products = block["entries"]["products"]
                    break

        products_widget = create_products_table_widget(block_frame, saved_products)

    # –ë–õ–û–ö –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –ü–û–õ–ï–ô –î–û–ì–û–í–û–†–ê
    specific_contract_fields = [field for field in contract_fields if field not in COMMON_FIELDS]

    if specific_contract_fields:
        fields_grid_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
        fields_grid_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_fields = [
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–ª—è (–Ω–µ —Ç–æ–≤–∞—Ä–Ω—ã–µ)
            "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "—Ä–∞–∑–æ–º", "–≤—Å—å–æ–≥–æ", "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º",
            "–∑–Ω–∏–∂–∫–∞", "–∞–≤–∞–Ω—Å", "–¥–æ–ø–ª–∞—Ç–∞", "–∑–∞–ª–∏—à–æ–∫", "–ø–¥–≤", "–Ω–¥—Å"
        ]

        sorted_fields = []
        remaining_fields = specific_contract_fields.copy()

        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for priority_field in priority_fields:
            if priority_field in remaining_fields:
                sorted_fields.append(priority_field)
                remaining_fields.remove(priority_field)

        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        sorted_fields.extend(sorted(remaining_fields))

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—è –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for i, field_key in enumerate(sorted_fields):
            label = ctk.CTkLabel(fields_grid_frame, text=f"<{field_key}>", anchor="w", width=140,
                                 font=("Arial", 12))
            label.grid(row=i, column=0, padx=5, pady=3, sticky="w")

            entry = CustomEntry(fields_grid_frame, field_name=field_key, examples_dict=EXAMPLES)
            entry.grid(row=i, column=1, padx=5, pady=3, sticky="ew")
            fields_grid_frame.columnconfigure(1, weight=1)

            saved_value = template_specific_memory.get(field_key, general_memory.get(field_key))
            if saved_value is not None:
                entry.set_text(saved_value)

            bind_entry_shortcuts(entry, main_context_menu)
            current_block_entries[field_key] = entry

            hint_text = EXAMPLES.get(field_key, f"–ü–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: {field_key}")
            hint_button = ctk.CTkButton(fields_grid_frame, text="‚Ñπ", width=28, height=28, font=("Arial", 14),
                                        command=lambda h=hint_text, f=field_key:
                                        messagebox.showinfo(f"–ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è <{f}>", h))
            hint_button.grid(row=i, column=2, padx=(0, 5), pady=3, sticky="e")

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–∏—Ö –ø–æ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        def update_summary_fields():
            if not products_widget:
                return

            total_sum = products_widget["update_total"]()

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –æ–±—â–µ–π —Å—É–º–º—ã
            summary_fields = ["—Ä–∞–∑–æ–º", "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "–≤—Å—å–æ–≥–æ"]
            for field_name in summary_fields:
                if field_name in current_block_entries:
                    entry = current_block_entries[field_name]
                    entry.configure(state="normal")
                    entry.set_text(f"{total_sum:.2f}")
                    entry.configure(state="readonly")

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º"
            if "—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º" in current_block_entries:
                entry = current_block_entries["—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º"]
                entry.configure(state="normal")
                if total_sum > 0:
                    entry.set_text(number_to_ukrainian_text(total_sum).capitalize())
                else:
                    entry.set_text("")
                entry.configure(state="readonly")

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –ø–æ–ª–µ–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–æ–≤–∞—Ä–æ–≤
        if products_widget:
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            original_update = products_widget["update_total"]

            def enhanced_update():
                result = original_update()
                update_summary_fields()
                return result

            products_widget["update_total"] = enhanced_update

        # –†–æ–±–∏–º–æ readonly –ø–æ–ª—è, —è–∫—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–±—á–∏—Å–ª—é—é—Ç—å—Å—è
        readonly_fields = ["—Å—É–º–∞ –ø—Ä–æ–ø–∏—Å–æ–º", "—Ä–∞–∑–æ–º", "–∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", "–≤—Å—å–æ–≥–æ"]
        for key in readonly_fields:
            if key in current_block_entries:
                current_block_entries[key].configure(state="readonly")
                current_block_entries[key].configure(takefocus=False)
                current_block_entries[key].configure(fg_color=("gray90", "gray20"))

    # –ü–ê–ù–ï–õ–¨ –î–ï–ô–°–¢–í–ò–ô –î–õ–Ø –ë–õ–û–ö–ê
    block_actions_frame = ctk.CTkFrame(block_frame, fg_color="transparent")
    block_actions_frame.pack(fill="x", padx=5, pady=5)

    def clear_block_fields():
        if messagebox.askokcancel("–û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è", "–û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –ø–æ–ª—è —Ü—å–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É?"):
            for field_key, entry in current_block_entries.items():
                if field_key not in COMMON_FIELDS:
                    entry.configure(state="normal")
                    entry.set_text("")

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
            if products_widget:
                products_widget["set_data"]([])

    def replace_block_template():
        new_path = filedialog.askopenfilename(
            title="–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω",
            filetypes=[("Word Documents", "*.docm *.docx")]
        )
        if new_path:
            try:
                new_placeholders = enhanced_extract_placeholders_from_word(new_path)
                has_new_table = "<—Ç–∞–±–ª–∏—Ü—è_—Ç–æ–≤–∞—Ä—ñ–≤>" in open(new_path, 'rb').read().decode('utf-8', errors='ignore')

                if not new_placeholders and not has_new_table:
                    messagebox.showwarning("–£–≤–∞–≥–∞", "–£ –Ω–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤!")
                    return

                table_info = " + —Ç–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤" if has_new_table else ""
                path_label.configure(
                    text=f"–®–∞–±–ª–æ–Ω: {os.path.basename(new_path)} ({len(new_placeholders)} –ø–æ–ª—ñ–≤{table_info})")
                messagebox.showinfo("–£–≤–∞–≥–∞", "–©–æ–± –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω, –≤–∏–¥–∞–ª—ñ—Ç—å –±–ª–æ–∫ —ñ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π —à–∞–±–ª–æ–Ω:\n{e}")

    def remove_this_block():
        if messagebox.askokcancel("–í–∏–¥–∞–ª–∏—Ç–∏", "–í–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –±–ª–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—É?"):
            if block_dict in document_blocks:
                document_blocks.remove(block_dict)
            block_frame.destroy()
            save_current_state(document_blocks, tabview)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    ctk.CTkButton(block_actions_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è", command=clear_block_fields).pack(side="left", padx=3)
    ctk.CTkButton(block_actions_frame, text="üîÑ –ó–∞–º—ñ–Ω–∏—Ç–∏ —à–∞–±–ª–æ–Ω", command=replace_block_template).pack(side="left",
                                                                                                      padx=3)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –æ –ø–æ–ª—è—Ö
    fields_list = sorted(list(dynamic_fields))
    products_info_text = " + —Ç–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤" if has_products_table else ""
    info_text = f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(dynamic_fields)} –ø–æ–ª—ñ–≤{products_info_text}: " + ", ".join(fields_list[:3])
    if len(dynamic_fields) > 3:
        info_text += f" —Ç–∞ —â–µ {len(dynamic_fields) - 3}..."

    info_label = ctk.CTkLabel(block_actions_frame, text=info_text, text_color="gray60", font=("Arial", 10))
    info_label.pack(side="left", padx=10)

    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ö–µ–¥–µ—Ä–µ
    remove_button = ctk.CTkButton(header_frame, text="üóë", width=28, height=28, fg_color="gray50", hover_color="gray40",
                                  command=remove_this_block)
    remove_button.pack(side="right", padx=(5, 0))

    # –°–û–•–†–ê–ù–ï–ù–ò–ï –ë–õ–û–ö–ê —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö
    all_entries = {}
    all_entries.update(global_entries)  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    all_entries.update(current_block_entries)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if products_widget:
        all_entries["products"] = products_widget["get_data"]()  # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        all_entries["has_products_table"] = True
    else:
        all_entries["products"] = []
        all_entries["has_products_table"] = False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    current_tab_name = tabview.get()
    event_number = None

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∫–ª–∞–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ó–∞—Ö—ñ–¥ 1" -> 1)
        if current_tab_name.startswith("–ó–∞—Ö—ñ–¥ "):
            event_number = int(current_tab_name.split(" ")[1])
        else:
            event_number = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except (ValueError, IndexError):
        event_number = 1

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –±–ª–æ–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    block_dict = {
        "path": template_path,
        "entries": all_entries,
        "fields": list(dynamic_fields),
        "event_number": event_number,
        "tab_name": current_tab_name,
        "has_products_table": has_products_table
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    document_blocks.append(block_dict)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    save_current_state(document_blocks, tabview)

    # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–Ω—ã—Ö –ø–æ–ª–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if products_widget:
        products_widget["update_total"]()

    messagebox.showinfo("–£—Å–ø—ñ—Ö",
                        f"–ë–ª–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!\n"
                        f"–®–∞–±–ª–æ–Ω: {os.path.basename(template_path)}\n"
                        f"–ü–æ–ª—ñ–≤: {len(dynamic_fields)}\n"
                        f"–¢–∞–±–ª–∏—Ü—è —Ç–æ–≤–∞—Ä—ñ–≤: {'–¢–∞–∫' if has_products_table else '–ù—ñ'}")

    return block_dict


def get_all_block_data(tab_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
    tab_blocks = []
    for block in document_blocks:
        if block.get("tab_name") == tab_name:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å products_widget
            current_data = {}
            current_data.update(block["entries"])

            # –ï—Å–ª–∏ –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            if block.get("has_products_table", False):
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
                pass

            tab_blocks.append({
                "path": block["path"],
                "entries": current_data,
                "fields": block["fields"],
                "has_products_table": block.get("has_products_table", False)
            })

    return tab_blocks


def clear_all_blocks_data(tab_name):
    """–û—á–∏—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
    cleared_count = 0
    for block in document_blocks:
        if block.get("tab_name") == tab_name:
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è (–∫—Ä–æ–º–µ –æ–±—â–∏—Ö)
            for field_key in block["entries"]:
                if field_key not in COMMON_FIELDS and field_key != "products":
                    block["entries"][field_key] = ""

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
            if "products" in block["entries"]:
                block["entries"]["products"] = []

            cleared_count += 1

    return cleared_count


def update_block_products_data(block_dict, products_data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–ª–æ–∫–µ"""
    if "entries" not in block_dict:
        block_dict["entries"] = {}

    block_dict["entries"]["products"] = products_data
    block_dict["entries"]["has_products_table"] = len(products_data) > 0


def get_block_products_data(block_dict):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –±–ª–æ–∫–∞"""
    if "entries" in block_dict and "products" in block_dict["entries"]:
        return block_dict["entries"]["products"]
    return []


def validate_block_data(block_dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–∞"""
    errors = []

    if not block_dict.get("path"):
        errors.append("–ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —à–∞–±–ª–æ–Ω—É")

    if not os.path.exists(block_dict.get("path", "")):
        errors.append("–§–∞–π–ª —à–∞–±–ª–æ–Ω—É –Ω–µ —ñ—Å–Ω—É—î")

    if not block_dict.get("entries"):
        errors.append("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø–æ–ª—ñ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ["–∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", "–ø–æ—Å–ª—É–≥–∞", "—Å—É–º–∞"]  # –ü—Ä–∏–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    for field in required_fields:
        if field in block_dict.get("fields", []):
            if not block_dict.get("entries", {}).get(field):
                errors.append(f"–ù–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: {field}")

    return errors


def export_block_data_to_json(block_dict, file_path):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ –≤ JSON —Ñ–∞–π–ª"""
    try:
        export_data = {
            "template_path": block_dict.get("path"),
            "fields": block_dict.get("fields", []),
            "entries": block_dict.get("entries", {}),
            "has_products_table": block_dict.get("has_products_table", False),
            "event_number": block_dict.get("event_number"),
            "tab_name": block_dict.get("tab_name"),
            "export_date": str(os.path.getctime(file_path)) if os.path.exists(file_path) else ""
        }

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)

        return True
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
        return False


def import_block_data_from_json(file_path):
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            import_data = json.load(f)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template_path = import_data.get("template_path")
        if not template_path or not os.path.exists(template_path):
            return None, "–®–∞–±–ª–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        block_dict = {
            "path": template_path,
            "entries": import_data.get("entries", {}),
            "fields": import_data.get("fields", []),
            "has_products_table": import_data.get("has_products_table", False),
            "event_number": import_data.get("event_number", 1),
            "tab_name": import_data.get("tab_name", "–ó–∞—Ö—ñ–¥ 1")
        }

        return block_dict, None
    except Exception as e:
        return None, f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}"


def duplicate_block(original_block_dict):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –±–ª–æ–∫–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    new_block = {
        "path": original_block_dict["path"],
        "entries": {},
        "fields": original_block_dict["fields"].copy(),
        "has_products_table": original_block_dict.get("has_products_table", False),
        "event_number": original_block_dict.get("event_number", 1),
        "tab_name": original_block_dict.get("tab_name", "–ó–∞—Ö—ñ–¥ 1")
    }

    # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –ø–æ–ª—è
    for field_key, value in original_block_dict["entries"].items():
        if field_key in COMMON_FIELDS:
            new_block["entries"][field_key] = value
        else:
            new_block["entries"][field_key] = ""

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    if "products" in new_block["entries"]:
        new_block["entries"]["products"] = []

    return new_block


def get_blocks_summary(tab_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±–ª–æ–∫–∞–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏"""
    tab_blocks = [block for block in document_blocks if block.get("tab_name") == tab_name]

    summary = {
        "total_blocks": len(tab_blocks),
        "templates_used": len(set(block["path"] for block in tab_blocks)),
        "blocks_with_products": sum(1 for block in tab_blocks if block.get("has_products_table", False)),
        "total_fields": sum(len(block.get("fields", [])) for block in tab_blocks)
    }

    return summary